// IncuBeertor
// Dependables
#include <Time.h>
#include <avr/sleep.h>
#include <OneWire.h>
#include <DallasTemperature.h> // http://arduino-info.wikispaces.com/Brick-Temperature-DS18B20 is a very useful reasorce
#include <SoftwareSerial.h>

// constants
//const int nmos = 3; 
const int peltierRelay1Pin = 8;
const int peltierRelay2Pin = 10;
const int fanRelayPin = 4;
const int tempPin = A1;
const int pumpPin = 5;
const int ledPin = 13;
const int btTxPin = 12; //transmit to the rx of bluetooth
const int btRxPin = 11; //recieve from Tx of bluetooth
// porgressState constants
const int AWAITING_TARGETS = 0;
const int BREWING = 1;
const int FINISHED = 2;
const int RESEND = 3;
//
const char PROFILE_NAME = '6';
const char START_TIME = '7';
const char TARGET_TIMES = '8';
const char TARGET_TEMPS = '9';
//
const char TEMP1 = 'i';
const char TEMP2 = 'j';
const char TARGET_TEMP = 't';
const char PELTIER_STATE = 'p';
const char RUN_TIME = 'r';

DeviceAddress Probe1Addr = {0x28, 0x4D, 0x8D, 0x6E, 0x05, 0x00, 0x00, 0xB6};
DeviceAddress Probe2Addr = {0x28, 0xBB, 0x29, 0x09, 0x06, 0x00, 0x00, 0xA8}; //This is the old probe used in the original temperatuer control/
SoftwareSerial btSerial(btRxPin, btTxPin); //Rx, Tx

OneWire oneWire(tempPin); // Setup a oneWire instance to communicate with any OneWire devices
DallasTemperature sensors(&oneWire);// Pass our oneWire reference to Dallas Temperature. 

// user adjustable variables
//float targetTempArray[] = {25.0};
//float targetTempTimeArray[] = {0};
float tempDev = 1.0;
const float TEMP_PRECISION = 0.1;

// non pin constants
//const int time0 = now(); // now() required time.h which will be present in real thing to control chaning target temps over time

//global variables
float temp1 = 0.0;
float temp2 = 0.0;
float tempAve = 0.0;
String peltierState = "OFF";
boolean toggle = 0;
float targetTemp;
float targetTemps[100];
float targetTimes[100];
int numSteps = false;
int progressState = AWAITING_TARGETS;
String androidStartTime;
unsigned long arduinoStartTime;
String profileName;
unsigned long runTime;

void heat() {
//  Heats the side with writing which will be on the water side
  digitalWrite(peltierRelay1Pin, LOW);
  digitalWrite(peltierRelay2Pin, HIGH);
  digitalWrite(fanRelayPin, HIGH); // fan and pump on note that the fan is on when low. also need a resistor between pin and gnd to turn off when not in use
  digitalWrite(pumpPin, HIGH);
  peltierState = "HEAT";
  digitalWrite(ledPin, HIGH);
}

void cool() {
//  Cools the side with writing which will be on the water side
  digitalWrite(peltierRelay1Pin, HIGH);
  digitalWrite(peltierRelay2Pin, LOW);
  digitalWrite(fanRelayPin, HIGH); // fan on
  digitalWrite(pumpPin, HIGH);
  peltierState = "COOL";
  digitalWrite(ledPin, LOW);
}

void hold() {
//  Turns the Peltiers off
  digitalWrite(peltierRelay1Pin, LOW);
  digitalWrite(peltierRelay2Pin, LOW);
  digitalWrite(fanRelayPin, LOW);
  digitalWrite(pumpPin, LOW);
  peltierState = "OFF";
  digitalWrite(ledPin, LOW);
}

boolean isFloat(String proband){
  boolean noLetters = true;
  for (int idx; idx < proband.length(); idx++){
    if (proband.charAt(idx)!= '.' || !isDigit(proband.charAt(idx))){
      noLetters = false;     
    }
  }
  return noLetters;
}


void setup() {
  // initialize the digital pin as an output.
//  pinMode(nmos, OUTPUT);
  pinMode(peltierRelay1Pin, OUTPUT);
  pinMode(peltierRelay2Pin, OUTPUT);
  pinMode(fanRelayPin, OUTPUT);
  pinMode(pumpPin, OUTPUT);
  pinMode(ledPin, OUTPUT);

  for (int i = 0; i < 100; i++){
    targetTemps[i] = -1.0;
    targetTimes[i] = -1.0;
  }

// ensure nothing is happening until we have target temp
  hold();

// set serial connections
  Serial.begin(9600); // Only needed for debugging
  btSerial.begin(57600); // bluetooth baud rate

// set temp sensor resolution
  sensors.setResolution(Probe1Addr, 12); //12 is the max resolution for my sensors
  sensors.setResolution(Probe2Addr, 12);
}

void loop() {
  while (progressState == AWAITING_TARGETS){
    getTargets();
  }
  while (progressState == BREWING){
    brewCycle();
  }
  if (progressState == FINISHED){
    btSerial.print(progressState);
    btSerial.flush();
    cli();
    sleep_enable();
    sleep_cpu();
  }
}

void getTargets(){
//  btSerial.print(progressState);
//  btSerial.flush();
//  delay (2); // wait for buffer to fill
  String valBuf = "";
  
  while (btSerial.available()){ // if there is a response from the android
    delay(1);
    if (btSerial.available() > 0){
      char c = btSerial.read();
      Serial.print(c);
      if (c == ';'){
        c = btSerial.read();
        Serial.println(c);
        
        if (c == PROFILE_NAME){
          profileName = valBuf;
          Serial.print("profile name: ");
          Serial.println(profileName);
        } else if (c == START_TIME){
          arduinoStartTime = millis();
          androidStartTime = valBuf;
          Serial.print("android start time: ");
          Serial.println(androidStartTime);
        } else if (c == TARGET_TIMES){
          Serial.print("filling TargetTimes with: ");
          fillTargetArrays(targetTimes, valBuf, true);
        } else if (c == TARGET_TEMPS){
          Serial.print("filling targetTemps with: ");
          fillTargetArrays(targetTemps, valBuf, false);
          progressState = BREWING;
        }
        valBuf = "";
      } else {
        valBuf += c;
      }
    }
  }
}

void fillTargetArrays(float tt[], String s, boolean convertToSeconds){
  String buf = "";
  int arrayIdx = 0;
  for (int i = 0; i < s.length(); i++){
    if (s[i] == ','){
      if (convertToSeconds){
        tt[arrayIdx] = buf.toFloat()*24*60*60;
      } else {
        tt[arrayIdx] = buf.toFloat();
      }
      Serial.print(buf);
      Serial.print(", ");
      arrayIdx += 1;
      buf = "";
    } else {
      buf += s[i];
    }
  }
  Serial.println();
}

void setTargetTemp(){
  //time untis == seconds
  float runTimeS = runTime/(1000);
  Serial.print("runTimeS: ");
  Serial.println(runTimeS);
  float ti1;
  float ti2;
  float te1;
  float te2;
  for(int i = 0; i < sizeof(targetTimes); i++){ //go through target times
      Serial.print("i: ");
      Serial.println(i);
    if (targetTimes[i+1] == -1.0){
      progressState = FINISHED;
      hold();
      break;
    } else if ((runTimeS > targetTimes[i]) && (runTimeS < targetTimes[i+1])){
      ti1 = targetTimes[i];
      ti2 = targetTimes[i+1];
      te1 = targetTemps[i];
      te2 = targetTemps[i+1];
      break;
    }
  }
  
  float timeDifference = ti2 - ti1;
  Serial.print("timeDifference: ");
  Serial.println(timeDifference);
  int substeps = (int)((te2 - te1)*(1 / TEMP_PRECISION)); // if TIME_PRECISION == 0.1 then we want 10 substeps per 1*C
  substeps += 1; // account for fence post effect (each substep has a start time and end time)
  Serial.print("substeps: ");
  Serial.println(substeps);
  for (int counter = 0; counter < substeps; counter++){
    Serial.print("counter: ");
    Serial.println(counter);
    if ((runTimeS > ti1 + (timeDifference * counter / substeps)) && (runTimeS < ti1 + (timeDifference * (counter+1) / substeps))){ // find which step we are currently in
      if (te2 > te1){ //if the temperature is going up
        targetTemp = te1 + (TEMP_PRECISION * counter);
      } else if (te2 < te1){ //if the temperature is going down
        targetTemp = te1 - (TEMP_PRECISION * counter);
      }
    }
  }
}


void brewCycle(){
  sensors.requestTemperatures();
  temp1 = sensors.getTempC(Probe1Addr); // -0.06 adjusted so that probes read the same at roome temperature (was 0.12 degrees different)
  temp2 = sensors.getTempC(Probe2Addr); // +0.06 adjusted so that probes read the same at roome temperature (was 0.12 degrees different)
  tempAve = (temp1+temp2) * 0.5;

  runTime = millis() - arduinoStartTime;

  setTargetTemp();
  
//  for (int i = 0; i < sizeof(targetTimes); i++ ){
//    Serial.print("android start time: ");
//    Serial.print(androidStartTime);
//    Serial.print(", arduino start time(ms): ");
//    Serial.print(arduinoStartTime);
//    Serial.print(", runTime(ms): ");
//    Serial.println(runTime);

//    if (targetTimes[i] == -1.0){
//      progressState = FINISHED;
//      hold();
//    } else {
//      setTargetTemp();
//    }
//    if (runTime >= targetTimes[i]*24*60*60*1000){ //convert targetTime from days to milliseconds
//      targetTemp = targetTemps[i];
//      Serial.print(", targetTemp: ");
//      Serial.println(targetTemp);
//      break;
//    }
//  }

  if(tempAve > (targetTemp+tempDev)){
    cool();
  } else if(tempAve < (targetTemp - tempDev)){
    heat();
  } else {hold();}

  String msgOut = String(progressState) +
                  profileName + ";" + PROFILE_NAME + 
                  androidStartTime + ";" + START_TIME + 
                  runTime + ";" + RUN_TIME +
                  String(targetTemp) + ";" + TARGET_TEMP + 
                  String(temp1) + ";" + TEMP1 +
                  String(temp2) + ";" + TEMP2 +
                  peltierState + ";" + PELTIER_STATE;
  
  String(progressState) + ",tt" + String(targetTemp) + ";,t1" + String(temp1) + ";,t2" + String(temp2) + ";,st" + peltierState+";";
//  msgOut = msgOut+msgOut;
  Serial.println(msgOut);
  
  btSerial.println(msgOut);
  btSerial.flush();

  delay(1000);
  Serial.print("T1: ");
  Serial.print(temp1);
  Serial.print(", T2: ");
  Serial.print(temp2);
  Serial.print(", Ta: ");
  Serial.print(tempAve);
  Serial.print(", Ti: ");
  Serial.print(runTime);
  Serial.print(", TT: ");
  Serial.print(targetTemp);
  Serial.print(", state: ");
  Serial.print(peltierState);
  Serial.print(", PS: ");
  Serial.println(progressState);
}


