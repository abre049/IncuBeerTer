// IncuBeertor
// Dependables
//#include <Time.h> // time.h isn't available on circuit.io but this will go into the real thing
#include <OneWire.h>
#include <DallasTemperature.h> // http://arduino-info.wikispaces.com/Brick-Temperature-DS18B20 is a very useful reasorce
#include <SoftwareSerial.h>

// constants
//const int nmos = 3; 
const int peltierRelay1Pin = 8;
const int peltierRelay2Pin = 10;
const int fanRelayPin = 4;
const int tempPin = A1;
const int pumpPin = 5;
const int ledPin = 13;
const int btTxPin = 12; //transmit to the rx of bluetooth
const int btRxPin = 11; //recieve from Tx of bluetooth

DeviceAddress Probe1Addr = {0x28, 0x4D, 0x8D, 0x6E, 0x05, 0x00, 0x00, 0xB6};
DeviceAddress Probe2Addr = {0x28, 0xBB, 0x29, 0x09, 0x06, 0x00, 0x00, 0xA8}; //This is the old probe used in the original temperatuer control/
SoftwareSerial btSerial(btRxPin, btTxPin); //Rx, Tx

OneWire oneWire(tempPin); // Setup a oneWire instance to communicate with any OneWire devices
DallasTemperature sensors(&oneWire);// Pass our oneWire reference to Dallas Temperature. 

// user adjustable variables
//float targetTempArray[] = {25.0};
//float targetTempTimeArray[] = {0};
float tempDev = 1.0;

// non pin constants
//const int time0 = now(); // now() required time.h which will be present in real thing to control chaning target temps over time

//global variables
float temp1 = 0.0;
float temp2 = 0.0;
float tempAve = 0.0;
String peltierState = "OFF";
boolean toggle = 0;
float targetTemp;
float targetTemps[100];
float targetTimes[100];
int numSteps = false;

void heat() {
//  Heats the side with writing which will be on the water side
  digitalWrite(peltierRelay1Pin, LOW);
  digitalWrite(peltierRelay2Pin, HIGH);
  digitalWrite(fanRelayPin, HIGH); // fan and pump on note that the fan is on when low. also need a resistor between pin and gnd to turn off when not in use
  digitalWrite(pumpPin, HIGH);
  peltierState = "HEAT";
  digitalWrite(ledPin, HIGH);
}

void cool() {
//  Cools the side with writing which will be on the water side
  digitalWrite(peltierRelay1Pin, HIGH);
  digitalWrite(peltierRelay2Pin, LOW);
  digitalWrite(fanRelayPin, HIGH); // fan on
  digitalWrite(pumpPin, HIGH);
  peltierState = "COOL";
  digitalWrite(ledPin, LOW);
}

void hold() {
//  Turns the Peltiers off
  digitalWrite(peltierRelay1Pin, LOW);
  digitalWrite(peltierRelay2Pin, LOW);
  digitalWrite(fanRelayPin, LOW);
  digitalWrite(pumpPin, LOW);
  peltierState = "OFF";
  digitalWrite(ledPin, LOW);
}

boolean isFloat(String proband){
  boolean noLetters = true;
  for (int idx; idx < proband.length(); idx++){
    if (proband.charAt(idx)!= '.' || !isDigit(proband.charAt(idx))){
      noLetters = false;     
    }
  }
  return noLetters;
}


void setup() {
  // initialize the digital pin as an output.
//  pinMode(nmos, OUTPUT);
  pinMode(peltierRelay1Pin, OUTPUT);
  pinMode(peltierRelay2Pin, OUTPUT);
  pinMode(fanRelayPin, OUTPUT);
  pinMode(pumpPin, OUTPUT);
  pinMode(ledPin, OUTPUT);

// ensure nothing is happening until we have target temp
  hold();

// set serial connections
  Serial.begin(9600); // Only needed for debugging
  btSerial.begin(57600); // bluetooth baud rate

// set temp sensor resolution
  sensors.setResolution(Probe1Addr, 12); //12 is the max resolution for my sensors
  sensors.setResolution(Probe2Addr, 12);

  while (!btSerial.available()){ // wait for android to connect then interpret vaules
    delay(100);
  }
  delay (200); // wait for buffer to fill
 
  // {ti1,ti2,...,te1;te2;...;} <<-- this is the form of the incomming message #--> number of steps, ',' --> time value, ';' --> temp value
  //
  String msgIn = btSerial.readString(); // read the incoming message
  Serial.println(msgIn);
  String firstHalf = msgIn.substring(0,(msgIn.length()/2)); // split it in two
  String secondHalf = msgIn.substring(msgIn.length()/2);
  while (firstHalf != secondHalf){ // are the two halves the same? keep asking to resend until they are. this test is to increase stability of the transfered message,
    btSerial.println("resend");
    delay(200);
    msgIn = btSerial.readString();
    firstHalf = msgIn.substring(0,(msgIn.length()/2)); // split it in two
    secondHalf = msgIn.substring(msgIn.length()/2);
  }

  String valBuf = "";
  int timeIdx = 0;
  int tempIdx = 0;
  for (int i = 0; i < firstHalf.length(); i++){
    if (msgIn[i] == ','){
      targetTimes[timeIdx] = valBuf.toFloat();
      timeIdx++;
      valBuf = "";
    } else if (msgIn[i] == ';'){
      targetTemps[tempIdx] = valBuf.toFloat();
      tempIdx++;
      valBuf = "";
    } else {
      valBuf = valBuf + msgIn[i];
    }
  }
  Serial.print(targetTimes[0,100]);
  Serial.print(targetTemps[0,100]);
}

void loop() {
  // set target temps
  // get current temps
  // if requried then change the state
  // if required then log the state locally
  // if there is a bluetooth connection then send the logged data to the arduino
  
  sensors.requestTemperatures();
  temp1 = sensors.getTempC(Probe1Addr); // -0.06 adjusted so that probes read the same at roome temperature (was 0.12 degrees different)
  temp2 = sensors.getTempC(Probe2Addr); // +0.06 adjusted so that probes read the same at roome temperature (was 0.12 degrees different)
  tempAve = (temp1+temp2) * 0.5;
  Serial.println("loop");
  delay(1000);

//  if(btSerial.available()){
//    String newTargetTemp;
//    delay(50); //allow buffer to fill
//    
//    if (btSerial.available() >0) {
//      String msgIn = btSerial.readString();
//      String firstHalf = msgIn.substring(0,(msgIn.length()/2));
//      String secondHalf = msgIn.substring(msgIn.length()/2);
//      if (firstHalf == secondHalf){
//        newTargetTemp = firstHalf;
//        Serial.println("new tt: "+newTargetTemp); 
//  
//        if (isFloat(newTargetTemp)){
//          targetTemp = newTargetTemp.toFloat();
//        }
//      
//        Serial.println("old tt: "+String(targetTemp));
//    
//        if(tempAve > (targetTemp+tempDev)){
//          cool();
//        } else if(tempAve < (targetTemp - tempDev)){
//          heat();
//        } else {hold();}
//
//        String msgOut = ",tt" + String(targetTemp) + ";,t1" + String(temp1) + ";,t2" + String(temp2) + ";,st" + peltierState+";";
//        msgOut = msgOut+msgOut;
//        Serial.println(msgOut);
//        
//        btSerial.println(msgOut);
//        btSerial.flush();
//      }
//    }
//  }
}


